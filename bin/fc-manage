#!/usr/bin/env ruby

$:.unshift File.expand_path('../lib', File.dirname(__FILE__))
require 'psych'
require 'logger'
require 'optparse'
require 'filecluster'
require 'utils'
require 'manage'

default_db_config = File.expand_path(File.dirname(__FILE__))+'/db.yml'
descriptions = {
  :config      => {:short => 'c',  :full => 'config',     :default => default_db_config, :text => "path to db.yml file, default #{default_db_config}"},
  :curr_host   => {:short => 'h', :full => 'host',       :default => FC::Storage.curr_host, :text => "Host for storages, default #{FC::Storage.curr_host}"}
}
commands_help = {
  'storages' => [
    'show list and manage storages', 
    %q{Usage: fc-manage [options] storages <command>
Command:
   list                show all stotages for all hosts
   show <name>         show full info for storage   
   add                 add new storage
   rm <name>           delete storage
   change <name>       change storage attributes
   update_size <name>  update storage size
   sync_info <name>    show information about synchronization storage and file system
   sync <name>         synchronize storage and file system
}],
  'policies' => [
    'show list and manage plicies', 
    %q{Usage: fc-manage [options] plicies <command>
Command:
   list                show all plicies
   show <id/name>      show full info for policy   
   add                 add new policy
   rm <id/name>        delete policy
   change <id/name>    change policy attributes
}],
  'show' => [
    'show variable', 
    %q{Usage: fc-manage [options] show <command>
Command:
   current_host        show current host
   global_daemon       show host and uptime where run global daemon
   errors [<count>]    show last count (default 10) errors
   host_info [<host>]  show info for host (default current host)
   items_info          show items statistics       
}],
  'copy_rules' => [
    'show and manage copy rules', 
    %q{Usage: fc-manage [options] copy_rules <command>
Command:
   list                show all copy rules
   show <id>           show full info for copy rule   
   add                 add new copy rule
   rm <id>             delete copy rule
   change <id>         change copy rules attributes       
}],
  'var' => [
    'show and change FC::Var', 
    %q{Usage: fc-manage [options] var <command>
Command:
   list                show all FC::Var-s
   show <variable>     show current value for variable   
   change <variable>   change variable       
}],
  'item' => [
    'show and manage items', 
    %q{Usage: fc-manage [options] item <command>
Command:
   info <name>                                       show item info, name can contain ? and * 
   add_local <storage name> <path> <policy id/name>  add file in local storage as item (as <path> name) with policy 
   add <path> <name> <policy id/name>                add file as item <name> with policy
   rm <name>                                         delete item
}]
}
desc = %q{Get info and manage for storages, policies and items.
Usage: fc-manage [options] <command> [<args>]
Commands:
}
commands_help.each{|key, val| desc << "   #{key}#{" "*(10-key.size)}#{val[0]}\n"}
desc << "   help      show help for commands ('fc-manage help <command>')\n"
$options = option_parser_init(descriptions, desc)
FC::Storage.instance_variable_set(:@uname, $options[:curr_host]) if $options[:curr_host] && $options[:curr_host] != FC::Storage.curr_host
trap("INT", proc {exit})

STDOUT.sync = true
db_options = Psych.load(File.read($options[:config]))
FC::DB.connect_by_config(db_options.merge(:reconnect => true, :multi_threads => true))

command = ARGV[0]
if ARGV.empty?
  puts $options['optparse']
  exit
end

if command == 'help'
  if !ARGV[1]
    puts $options['optparse']
  elsif commands_help[ARGV[1]]
    puts commands_help[ARGV[1]][1]
  else
    puts "'#{command}' is not a fc-manage command. See 'fc-manage --help'."
  end
elsif commands_help[command]
  if !ARGV[1]
    puts "Need command. See 'fc-manage help storages'."
  elsif self.private_methods.member?("#{command}_#{ARGV[1]}".to_sym)
    send "#{command}_#{ARGV[1]}"
  else
    puts "Unknown command. See 'fc-manage help #{command}'."
  end
else
  puts "'#{command}' is not a fc-manage command. See 'fc-manage --help'."
end