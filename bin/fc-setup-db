#!/usr/bin/env ruby

$:.unshift File.expand_path('../lib', File.dirname(__FILE__))
require 'optparse'
require 'psych'
require 'filecluster'
require 'utils'
require 'readline'

descriptions = {
  :host =>       {:short => 'h', :full => 'host',     :default => 'localhost', :text => 'mysql host name, default "localhost"', :save => true},
  :database =>   {:short => 'd', :full => 'db',       :default => 'fc',        :text => 'mysql database, default "fc"', :save => true},
  :username =>   {:short => 'u', :full => 'user',     :default => 'root',      :text => 'mysql user, default "root"', :save => true},
  :password =>   {:short => 'p', :full => 'password', :default => '',          :text => 'mysql password, default ""', :save => true},
  :port =>       {:short => 'P', :full => 'port',     :default => '3306',      :text => 'mysql port, default "3306"', :save => true},
  :prefix =>     {:short => 't', :full => 'prefix',   :default => '',          :text => 'tables prefix, default ""', :save => true},
  :init_tables =>{:short => 'i', :full => 'init',     :default => false,       :text => 'init tables, default no', :no_val => true},
  :force =>      {:short => 'f', :full => 'force',    :default => false,       :text => 'do not ask questions', :no_val => true}
}
desc = %q{Setup FileCluster database connection options.
Create tables if nessary.
Usage: fc-init-db [options]}
options = option_parser_init(descriptions, desc)
options.delete('optparse')
trap("INT", proc {exit})

puts options.inspect.gsub(/[\{\}\:]/, "").gsub(", ", "\n").gsub(/(.{7,})=>/, "\\1:\t").gsub("=>", ":\t\t")

s = options[:force] ? 'y' : Readline.readline("Continue? (y/n) ", false).strip.downcase
puts ""
if s == "y" || s == "yes"
  print "Test connection..  "
  FC::DB.connect_by_config(options)
  puts "ok"
  if options[:init_tables]
    print "Make tables..      "
    FC::DB.init_db
    puts "ok"
  end
  print "Save to config..   "
  options.select!{|key, val| descriptions[key][:save]}
  File.open(File.expand_path(File.dirname(__FILE__))+'/db.yml', 'w') do |f|
    f.write(options.to_yaml)
  end
  puts "ok"
else
  puts "Canceled."
end
